[pytest]
# Test discovery patterns
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test markers for categorization
markers =
    unit: Unit tests - fast, isolated component tests (deselect with '-m "not unit"')
    integration: Integration tests - test component interactions (deselect with '-m "not integration"')
    functional: Functional tests - test features end-to-end (deselect with '-m "not functional"')
    performance: Performance tests - benchmarking and load tests (deselect with '-m "not performance"')
    e2e: End-to-end tests - complete system tests (deselect with '-m "not e2e"')
    slow: Slow tests - tests that take significant time (deselect with '-m "not slow"')
    gpu: Tests requiring GPU/CUDA/MPS (deselect with '-m "not gpu"')
    skipif: Conditional test skipping based on conditions

# Output and reporting
addopts =
    --verbose
    --strict-markers
    --tb=short
    --color=yes
    --disable-warnings
    --maxfail=5
    --ff
    -ra

# Coverage settings (when running with --cov)
[coverage:run]
source = gl_rl_model
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */site-packages/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstract

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Timeout for tests (in seconds)
timeout = 300
timeout_method = thread

# Parallel execution (requires pytest-xdist)
# Uncomment to enable parallel test execution
# addopts = -n auto

# Test collection
norecursedirs = .git .tox dist build *.egg __pycache__ checkpoints logs

# Minimum Python version
minversion = 3.10